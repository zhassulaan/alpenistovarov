{"ast":null,"code":"import { guestInstance, authInstance } from \"./index\";\nimport jwtDecode from \"jwt-decode\";\nexport const signup = async (name, phone, email, password) => {\n  try {\n    const response = await guestInstance.post(\"user/signup\", {\n      name,\n      phone,\n      email,\n      password,\n      role: \"USER\"\n    });\n    const token = response.data.token;\n    const user = jwtDecode(token);\n    localStorage.setItem(\"token\", token);\n    return user;\n  } catch (e) {\n    alert(\"Введенные email или номер телефона уже зарегистрированы\");\n    return false;\n  }\n};\nexport const login = async (email, password) => {\n  try {\n    const response = await guestInstance.post(\"user/login\", {\n      email,\n      password\n    });\n    const token = response.data.token;\n    const user = jwtDecode(token);\n    localStorage.setItem(\"token\", token);\n    return user;\n  } catch (e) {\n    alert(e.response.data.message);\n    return false;\n  }\n};\nexport const logout = () => {\n  localStorage.removeItem(\"token\");\n};\nexport const check = async () => {\n  let userToken, userData;\n  try {\n    let userToken = localStorage.getItem(\"token\");\n    // если в хранилище нет действительного токена\n    if (!userToken) {\n      return false;\n    }\n    // токен есть, надо проверить его подлинность\n    const response = await authInstance.get(\"user/check\");\n    userToken = response.data.token;\n    userData = jwtDecode(userToken);\n    localStorage.setItem(\"token\", userToken);\n    return userData;\n  } catch (e) {\n    localStorage.removeItem(\"token\");\n    return false;\n  }\n};","map":{"version":3,"names":["guestInstance","authInstance","jwtDecode","signup","name","phone","email","password","response","post","role","token","data","user","localStorage","setItem","e","alert","login","message","logout","removeItem","check","userToken","userData","getItem","get"],"sources":["/Users/zhassik/Downloads/yaq/front/src/http/userAPI.js"],"sourcesContent":["import { guestInstance, authInstance } from \"./index\";\nimport jwtDecode from \"jwt-decode\";\n\nexport const signup = async (name, phone, email, password) => {\n  try {\n    const response = await guestInstance.post(\"user/signup\", {\n      name,\n      phone,\n      email,\n      password,\n      role: \"USER\",\n    });\n    const token = response.data.token;\n    const user = jwtDecode(token);\n    localStorage.setItem(\"token\", token);\n    return user;\n  } catch (e) {\n    alert(\"Введенные email или номер телефона уже зарегистрированы\");\n    return false;\n  }\n};\n\nexport const login = async (email, password) => {\n  try {\n    const response = await guestInstance.post(\"user/login\", {\n      email,\n      password,\n    });\n    const token = response.data.token;\n    const user = jwtDecode(token);\n    localStorage.setItem(\"token\", token);\n    return user;\n  } catch (e) {\n    alert(e.response.data.message);\n    return false;\n  }\n};\n\nexport const logout = () => {\n  localStorage.removeItem(\"token\");\n};\n\nexport const check = async () => {\n  let userToken, userData;\n  try {\n    let userToken = localStorage.getItem(\"token\");\n    // если в хранилище нет действительного токена\n    if (!userToken) {\n      return false;\n    }\n    // токен есть, надо проверить его подлинность\n    const response = await authInstance.get(\"user/check\");\n    userToken = response.data.token;\n    userData = jwtDecode(userToken);\n    localStorage.setItem(\"token\", userToken);\n    return userData;\n  } catch (e) {\n    localStorage.removeItem(\"token\");\n    return false;\n  }\n};\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,YAAY,QAAQ,SAAS;AACrD,OAAOC,SAAS,MAAM,YAAY;AAElC,OAAO,MAAMC,MAAM,GAAG,OAAOC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAEC,QAAQ,KAAK;EAC5D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMR,aAAa,CAACS,IAAI,CAAC,aAAa,EAAE;MACvDL,IAAI;MACJC,KAAK;MACLC,KAAK;MACLC,QAAQ;MACRG,IAAI,EAAE;IACR,CAAC,CAAC;IACF,MAAMC,KAAK,GAAGH,QAAQ,CAACI,IAAI,CAACD,KAAK;IACjC,MAAME,IAAI,GAAGX,SAAS,CAACS,KAAK,CAAC;IAC7BG,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,KAAK,CAAC;IACpC,OAAOE,IAAI;EACb,CAAC,CAAC,OAAOG,CAAC,EAAE;IACVC,KAAK,CAAC,yDAAyD,CAAC;IAChE,OAAO,KAAK;EACd;AACF,CAAC;AAED,OAAO,MAAMC,KAAK,GAAG,OAAOZ,KAAK,EAAEC,QAAQ,KAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMR,aAAa,CAACS,IAAI,CAAC,YAAY,EAAE;MACtDH,KAAK;MACLC;IACF,CAAC,CAAC;IACF,MAAMI,KAAK,GAAGH,QAAQ,CAACI,IAAI,CAACD,KAAK;IACjC,MAAME,IAAI,GAAGX,SAAS,CAACS,KAAK,CAAC;IAC7BG,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,KAAK,CAAC;IACpC,OAAOE,IAAI;EACb,CAAC,CAAC,OAAOG,CAAC,EAAE;IACVC,KAAK,CAACD,CAAC,CAACR,QAAQ,CAACI,IAAI,CAACO,OAAO,CAAC;IAC9B,OAAO,KAAK;EACd;AACF,CAAC;AAED,OAAO,MAAMC,MAAM,GAAG,MAAM;EAC1BN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;AAClC,CAAC;AAED,OAAO,MAAMC,KAAK,GAAG,YAAY;EAC/B,IAAIC,SAAS,EAAEC,QAAQ;EACvB,IAAI;IACF,IAAID,SAAS,GAAGT,YAAY,CAACW,OAAO,CAAC,OAAO,CAAC;IAC7C;IACA,IAAI,CAACF,SAAS,EAAE;MACd,OAAO,KAAK;IACd;IACA;IACA,MAAMf,QAAQ,GAAG,MAAMP,YAAY,CAACyB,GAAG,CAAC,YAAY,CAAC;IACrDH,SAAS,GAAGf,QAAQ,CAACI,IAAI,CAACD,KAAK;IAC/Ba,QAAQ,GAAGtB,SAAS,CAACqB,SAAS,CAAC;IAC/BT,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEQ,SAAS,CAAC;IACxC,OAAOC,QAAQ;EACjB,CAAC,CAAC,OAAOR,CAAC,EAAE;IACVF,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;IAChC,OAAO,KAAK;EACd;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}